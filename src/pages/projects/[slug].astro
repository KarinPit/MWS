---
import Navigation from "../../components/navigation.vue";
import ProjectGallery from "../../components/projectGallery.vue";
import ContactForm from "../../components/contactForm.vue";
import Footer from "../../components/footer.vue";
import "bootstrap/dist/css/bootstrap.css";
import "../../../public/styles/navbar.css";
import "../../../public/styles/viewProject.css";
import { marked } from "marked";

const response = await fetch(
  "https://mws-data-280b2464bf34.herokuapp.com/api/projects?populate=*"
);
const { data } = await response.json();
const { slug } = Astro.params;
const page = data.find((post) => post.attributes.title === slug);
if (!page) return Astro.redirect("/404");

function styleText(line) {
  let formattingTags = Object.keys(line);
  let lineText = line.text;
  if (line.type === "text") {
    if (formattingTags.indexOf("bold") != -1) {
      lineText = `<strong>${lineText}</strong>`;
    }
    if (formattingTags.indexOf("underline") != -1) {
      lineText = `<u>${lineText}</u>`;
    }
    if (formattingTags.indexOf("strikethrough") != -1) {
      lineText = `<s>${lineText}</s>`;
    }
    if (formattingTags.indexOf("italic") != -1) {
      lineText = `<i>${lineText}</i>`;
    }
    if (lineText === "") {
      lineText = "\n";
    }
  }
  return lineText;
}

function listText(paragraph) {
  let paragraphText = "";
  if (paragraph.format === "ordered") {
    let ol = "";
    paragraph.children.forEach((li) => {
      ol += `<li><p>${li.children[0].text}</p></li>`;
    });
    ol = `<ol>${ol}</ol>`;
    paragraphText += `${ol}`;
  }
  if (paragraph.format === "unordered") {
    let ul = "";
    paragraph.children.forEach((li) => {
      let liText = "";
      li.children.forEach((child) => {
        liText += styleText(child);
      });
      ul += `<li><p>${liText}</p></li>`;
    });
    ul = `<ul>${ul}</ul>`;
    paragraphText += `${ul} `;
  }

  return paragraphText;
}

function convertToMarkdown(content) {
  let text = "";
  content.forEach((paragraph) => {
    let formattedLine = "";
    if (paragraph.type === "paragraph") {
      paragraph.children.forEach((line) => {
        let addText = styleText(line);
        formattedLine += addText;
      });
    }
    if (paragraph.type === "list") {
      formattedLine += listText(paragraph);
    }
    if (paragraph.type === "image") {
      let url = paragraph.image.formats.medium.url;
      text += `<img src="${url}">`;
    }
    text += `<p>${formattedLine}</p>`;
  });

  return text;
}
const toMark = page.attributes.description;
const markdownText = convertToMarkdown(toMark);
const renderedHTML = marked(markdownText);
const { id, attributes } = page;
---

<!DOCTYPE html>
<html lang="he">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="icon" type="image/svg+xml" href="/images/Favicon-new.svg" />
    <title>MWS Studio</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Alegreya+Sans+SC:wght@900&family=Assistant:wght@200;300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <title>{attributes.title}</title>
  </head>
  <body>
    <header>
      <Navigation client:load />
    </header>
    <main>
      <div class="row project-row my-auto">
        <div class="project-area">
          <div class="project-desc">
            <a class="back-btn" href="/projects"
              ><btn
                ><img src="/images/arrow-right.svg" />בחזרה לעמוד הפרויקטים</btn
              ></a
            >
            <h2>{attributes.title}</h2>
            <div>
              <pre><p class="p-line" set:html={renderedHTML} /></pre>
              <ProjectGallery project={attributes} client:load />
            </div>
          </div>
        </div>
      </div>
    </main>
    <Footer client:load />
  </body>
</html>

<script
  src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js"
  integrity="sha384-zYPOMqeu1DAVkHiLqWBUTcbYfZ8osu1Nd6Z89ify25QV9guujx43ITvfi12/QExE"
  crossorigin="anonymous"></script>
<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.min.js"
  integrity="sha384-Y4oOpwW3duJdCWv5ly8SCFYWqFDsfob/3GkgExXKV4idmbt98QcxXYs9UoXAB7BZ"
  crossorigin="anonymous"></script>
<script></script>
